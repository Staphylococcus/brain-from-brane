#!/usr/bin/env python3
"""
Scans markdown documents to report their character lengths and identify overly long files.
"""

import os
import datetime
import glob # For find_markdown_files, similar to check_broken_links.py

# --- Configuration ---
DOCS_DIR_NAME = "docs"  # Name of the docs directory relative to project root
OUTPUT_FILE_NAME = "DOCUMENT_LENGTH_REPORT.md"  # Name of the output file
CHARACTER_LENGTH_WARNING_THRESHOLD = 15000  # Warn if a document exceeds this many characters

def find_markdown_files(docs_abs_path):
    """Finds all markdown files recursively in the given directory."""
    if not os.path.isdir(docs_abs_path):
        print(f"Error: Directory not found - {docs_abs_path}")
        return []
    return glob.glob(os.path.join(docs_abs_path, '**', '*.md'), recursive=True)

def get_document_character_count(filepath):
    """Reads a file and returns its character count."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        return len(content)
    except FileNotFoundError:
        print(f"Warning: File not found during character count: {filepath}")
        return 0
    except Exception as e:
        print(f"Error reading file {filepath} for character count: {e}")
        return 0

def generate_document_length_report(project_root_abs, docs_dir_name, output_file_name, warning_threshold):
    """
    Generates a document length report from markdown files and saves it.
    """
    docs_abs_path = os.path.join(project_root_abs, docs_dir_name)
    all_markdown_files = find_markdown_files(docs_abs_path)

    report_data = []
    total_files_scanned = len(all_markdown_files)
    total_characters_all_docs = 0
    files_over_threshold_count = 0

    print("Scanning document lengths...")

    for md_file_abs_path in all_markdown_files:
        relative_path = os.path.relpath(md_file_abs_path, project_root_abs)
        char_count = get_document_character_count(md_file_abs_path)
        total_characters_all_docs += char_count
        
        is_over_threshold = char_count > warning_threshold
        if is_over_threshold:
            files_over_threshold_count += 1
            
        report_data.append({
            'path': relative_path,
            'count': char_count,
            'over_threshold': is_over_threshold
        })
        print(f"Checked: {relative_path} ({char_count} chars)")

    # Sort data by character count, descending
    report_data.sort(key=lambda x: x['count'], reverse=True)

    output_abs_path = os.path.join(project_root_abs, output_file_name)

    try:
        with open(output_abs_path, 'w', encoding='utf-8') as f:
            f.write("# Document Length Report\n\n")
            f.write(f"This report is automatically generated by scanning all markdown files in the `{docs_dir_name}` directory.\n")
            f.write(f"Character length warning threshold: `{warning_threshold}` characters.\n\n")

            # Summary section
            f.write("## Summary\n\n")
            f.write(f"- **Total files scanned**: {total_files_scanned}\n")
            f.write(f"- **Total characters in all documents**: {total_characters_all_docs}\n")
            f.write(f"- **Files exceeding warning threshold ({warning_threshold} chars)**: {files_over_threshold_count}\n\n")

            if not report_data:
                f.write("No markdown files found to analyze.\n\n")
            else:
                f.write("## Document Details\n\n")
                f.write("| File Path | Character Count | Warning |\n")
                f.write("|---|---|---|\n")
                for doc in report_data:
                    warning_marker = "⚠️ YES" if doc['over_threshold'] else "✅ No"
                    f.write(f"| `{doc['path']}` | {doc['count']} | {warning_marker} |\n")
            
            f.write("\n---\n\n")
            f.write(f"*Report generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")

        print(f"Document length report successfully generated at: {output_abs_path}")
        print(f"{files_over_threshold_count} files exceeded the warning threshold of {warning_threshold} characters.")

    except Exception as e:
        print(f"Error writing to output file {output_abs_path}: {e}")

# --- Execution ---
if __name__ == "__main__":
    print("Starting document length reporter...")

    # The script is in a 'tools' subdirectory of the project root
    script_dir = os.path.dirname(os.path.abspath(__file__))
    PROJECT_ROOT_ABS = os.path.dirname(script_dir)

    print(f"Project root identified as: {PROJECT_ROOT_ABS}")

    generate_document_length_report(
        PROJECT_ROOT_ABS,
        DOCS_DIR_NAME,
        OUTPUT_FILE_NAME,
        CHARACTER_LENGTH_WARNING_THRESHOLD
    )
